name: Deploy Playwright Lambda Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  test-local:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run local tests
        run: npm test
        continue-on-error: true
      
      - name: Upload local test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: local-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  build-and-deploy:
    needs: test-local
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Build Lambda package
        run: |
          # Create a clean build directory
          mkdir -p build
          
          # Copy only the GitHub trigger script (lightweight)
          cp scripts/github-trigger.js build/
          mkdir -p build/scripts
          cp scripts/github-trigger.js build/scripts/
          
          # Create minimal package.json for Lambda
          echo '{
            "name": "playwright-github-trigger",
            "version": "1.0.0",
            "main": "scripts/github-trigger.js",
            "dependencies": {}
          }' > build/package.json
          
          cd build
          
          # Create deployment zip (very small, no dependencies needed)
          zip -r ../lambda.zip . 
          cd ..
          
          # Verify zip size
          echo "=== Lambda package size ==="
          ls -lh lambda.zip
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd infra
          terraform init
      
      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -out=tfplan
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo: ${{ github.event.repository.name }}
      
      - name: Terraform Apply
        run: |
          cd infra
          terraform apply tfplan
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repo: ${{ github.event.repository.name }}
      
      - name: Get Lambda function name
        id: lambda-info
        run: |
          cd infra
          LAMBDA_NAME=$(terraform output -raw lambda_function_name)
          S3_BUCKET=$(terraform output -raw s3_bucket_name)
          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
      
      - name: Test Lambda deployment
        run: |
          # Test Lambda with a simple ping (no GitHub API call)
          aws lambda invoke \
            --function-name ${{ steps.lambda-info.outputs.lambda_name }} \
            --payload '{"test": "ping"}' \
            --cli-binary-format raw-in-base64-out \
            response.json
          
          cat response.json
          
          # Check if Lambda responded (regardless of GitHub token)
          if grep -q '"statusCode"' response.json; then
            echo "✅ Lambda function deployed successfully"
            echo "ℹ️  To enable workflow triggering, add a GitHub Personal Access Token"
          else
            echo "❌ Lambda deployment failed"
            exit 1
          fi
      
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            lambda.zip
            infra/tfplan
            response.json


